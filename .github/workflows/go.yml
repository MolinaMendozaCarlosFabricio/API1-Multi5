# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go deployment

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  GO_VERSION: 1.23

jobs:

  test:
    name: Ejecutar pruebas
    runs-on: ubuntu-latest

    steps: 
      - name: Clonar repositorio
        uses: actions/checkout@v4
      
      - name: Configurar Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Instalar Dependencias
        run: go mod tidy

      - name: Ejecutar Pruebas
        run: go test ./...

      - name: Notificar Éxito
        if: success()
        run: echo "Pruebas exitosas"

      - name: Notificar Fallo
        if: failure()
        run: echo "Pruebas fallidas"
        
  build:
    name: Compilar y Desplegar
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Clonar el Repositorio
        uses: actions/checkout@v3

      - name: Configurar Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Compilar Binario
        run: go build -o server ./cmd/main.go

      - name: Desplegar en el Servidor
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          echo "$SSH_KEY" > deploy_key.pem
          chmod 600 deploy_key.pem

          echo "Conectando al servidor..."
          ssh -i deploy_key.pem $SSH_USER@$SSH_HOST << 'EOF'
            pkill -f server || true
            rm -f /home/$SSH_USER/server
            exit
          EOF

          echo "Subiendo binario..."
          scp -i deploy_key.pem server $SSH_USER@$SSH_HOST:/home/$SSH_USER/

          echo "Iniciando servidor..."
          ssh -i deploy_key.pem $SSH_USER@$SSH_HOST << 'EOF'
            nohup /home/$SSH_USER/server > /home/$SSH_USER/server.log 2>&1 &
            exit
          EOF

      - name: Notificar Éxito
        if: success()
        run: echo "Despliegue completado con éxito."

      - name: Notificar Fallo
        if: failure()
        run: echo "Error en el despliegue."
